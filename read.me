Comments in Java
In a program, comments take part in making the program become more human readable by placing the detail of code involved and proper use of comments makes maintenance easier and finding bugs easily. Comments are ignored by the compiler while compiling a code.

In Java there are three types of comments:
1. Single – line comments.
2. Multi – line comments.
3. Documentation comments.
A beginner level programmer uses mostly single-line comments for describing the code functionality. Its the most easiest typed comments.
Syntax:




//Comments here( Text in this line only is considered as comment )
Example:


//Java program to show single line comments
class Scomment
{
    public static void main(String args[])
    { 
         // Single line comment here
         System.out.println("Single line comment above"); 
    }
}
Multi-line Comments

To describe a full method in a code or a complex snippet single line comments can be tedious to write, since we have to give ‘//’ at every line. So to overcome this multi line comments can be used.
Syntax:

/*Comment starts
continues
continues
.
.
.
Commnent ends*/
Example:


//Java program to show multi line comments
class Scomment
{
    public static void main(String args[])
    { 
        System.out.println("Multi line comments below");
        /*Comment line 1
          Comment line 2 
          Comment line 3*/
    }
}
We can also accomplish single line comments by using the above syntax as shown below:

/*Comment line 1*/
Documentation Comments

This type of comments are used generally when writing code for a project/software package, since it helps to generate a documentation page for reference, which can be used for getting information about methods present, its parameters, etc.
For example http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html is an auto generated documentation page which is generated by using documentation comments and a javadoc tool for processing the comments.

Syntax:

/**Comment start
*
*tags are used in order to specify a parameter
*or method or heading
*HTML tags can also be used 
*such as <h1>
*
*comment ends*/
//Java program to illustrate frequently used
// Comment tags

/**
* <h1>Find average of three numbers!</h1>
* The FindAvg program implements an application that
* simply calculates average of three integers and Prints
* the output on the screen.
*
* @author Pratik Agarwal
* @version 1.0
* @since 2017-02-18
*/
public class FindAvg
{
	/**
	* This method is used to find average of three integers.
	* @param numA This is the first parameter to findAvg method
	* @param numB This is the second parameter to findAvg method
	* @param numC This is the second parameter to findAvg method
	* @return int This returns average of numA, numB and numC.
	*/
	public int findAvg(int numA, int numB, int numC)
	{
		return (numA + numB + numC)/3;
	}

	/**
	* This is the main method which makes use of findAvg method.
	* @param args Unused.
	* @return Nothing.
	*/

	public static void main(String args[])
	{
		FindAvg obj = new FindAvg();
		int avg = obj.findAvg(10, 20, 30);

		System.out.println("Average of 10, 20 and 30 is :" + avg);
	}
}
